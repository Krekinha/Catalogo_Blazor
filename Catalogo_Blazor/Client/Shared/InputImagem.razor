<div>
    <label>@Label</label>
    <div>
        <FileSelect @ref="fileSelect" FilesChanged="imagemArquivoSelecionado" Accept=".jpg, .jpeg, .png"></FileSelect>
        <button type="button" @onclick="@(() => fileSelect.SelectFiles())">Selecionar Imagem</button>
    </div>
</div>
<div>
    @if (imagemBase64 != null)
    {
        <div>
            <div style="margin: 10px;">
                <img src="data:image/jpeg;base64, @imagemBase64" style="width: 150px;" />
            </div>
        </div>
    }
    @if (ImagemRemota != null)
    {
        <div>
            <div style="margin: 10px;">
                <img src="data:image/jpeg;base64, @ImagemRemota" style="width: 150px;" />
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string Label { get; set; } = "Imagem";
    [Parameter]
    public string ImagemRemota { get; set; }
    [Parameter]
    public EventCallback<string> ImagemSelecionada { get; set; }

    private string imagemBase64;
    private FileSelect fileSelect;

    async Task imagemArquivoSelecionado(FileSelectChangeArgs args)
    {
        //seleciona um arquivo
        var arquivoSelecionado = args.Files.FirstOrDefault();

        //converte imagem para um array de bytes
        var imagesBytes = await fileSelect.GetFileBytesAsync(arquivoSelecionado.Name);

        //converte imagem para o formato Base64
        imagemBase64 = Convert.ToBase64String(imagesBytes);

        //notifica o componente que uma nova imagem foi selecionada
        await ImagemSelecionada.InvokeAsync(imagemBase64);

        //remove imagem anterior no modo de edição
        ImagemRemota = null;

        //notifica o componente que o estado mudou (renderiza o componente)
        StateHasChanged();

    }

}
