@page "/produtos/create"
@inject HttpClient http
@inject NavigationManager nav
@inject IJSRuntime js

<h2>Novo Produto</h2>

<EditForm Model="@produto" OnValidSubmit="@criarProduto">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label form="nome">Nome</label>
        <div>
            <InputText id="txtProdutoNome" @bind-Value="@produto.Nome" class="form-control" />
            <ValidationMessage For="@(()=> produto.Nome)" />
        </div>
    </div>

    <div class="form-group">
        <label form="descricao">Descricao</label>
        <div>
            <InputText @bind-Value="@produto.Descricao" class="form-control" />
            <ValidationMessage For="@(()=> produto.Descricao)" />
        </div>
    </div>

    <div class="form-group">
        <label form="preco">Preço</label>
        <div>
            <InputNumber @bind-Value="@produto.Preco" class="form-control" />
            <ValidationMessage For="@(()=> produto.Preco)" />
        </div>
    </div>

    <div class="form-group">
        <label form="categoria">Categoria:</label>
        <select @onchange="categoriaSelectionChanged" class="form-control">
            @if (categorias != null)
            {
                foreach (var categoria in categorias)
                {
                    <option value="@categoria.CategoriaId">
                        @categoria.Nome
                    </option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <InputImagem Label="Imagem" ImagemSelecionada="imagemSelecionada"
                     ImagemRemota="@ImagemRemota">

        </InputImagem>
    </div>

    <br />
    <button type="submit" class="btn btn-success">Salvar</button>
    <button class="btn btn-secondary" @onclick="@(()=> nav.NavigateTo("produtos"))">Cancelar</button>

</EditForm>



@code {

    [Parameter]
    public string ImagemRemota { get; set; }

    Produto produto = new Produto();
    List<Categoria> categorias;

    protected async override Task OnInitializedAsync()
    {
        await carregaCategorias();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Focus("txtProdutoNome");
        }
    }

    public async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("focusById", elementId);
    }

    async Task criarProduto()
    {
        await http.PostAsJsonAsync("api/Produtos", produto);
        nav.NavigateTo("produtos");
    }

    async Task carregaCategorias()
    {
        categorias = await http.GetFromJsonAsync<List<Categoria>>("api/categorias/todas");
    }

    void categoriaSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            produto.CategoriaId = id;
        }
    }

    private void imagemSelecionada(string imagemBase64)
    {
        produto.ImagemUrl = imagemBase64;
        ImagemRemota = null;
    }


}
